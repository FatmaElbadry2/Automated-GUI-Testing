1. combination of directions need to get the intersection between them
2. we need to get the nearest object to the prevObject if we have more than one -------> Done
3. choose nearest or first ???? (add nearest if the sub sentence doesn't have any directions)------> Done
4. add nearest and farthest
5. direction of the next sentence ------------> Done
6. at the end you perform the action on the object if not found on any random position in the x and y range
7. we get the intersection in 2 cases:
    a. after the return of the abs_pos_prep if we found another abs_pos_prep
    b. inside the same loop if the object was abs_pos_prep and we found another direction



unit testing:
1. objectTypeMapper:
# a word that has no meaning or not in my dict ---> pass
# object that exist ---> pass
# object that doesn't exist ---> pass it returns an empty array
# object that exists out of range ----> pass


actions:
mouse movements: click,drag,scroll, highlight
keyboard:write, keypress , shortcut

click on the file menu. choose the second option.
carry my range to the next sentence if:
1- a menu is opened.
2- combobox is opened.
3- submenu is opened.
4- go to a tab-bar.
5- calender.
6- drop-down.
7- text area.
8- textbox.
9- go to the dialog-box
10- go to the scroll-bar

function which seeks the root verb. depending on that verb we will split our sentence.
1- click --> no splitting just normal object finder.
2- drag --> split on "to" and look for a quantity. call object finder before and after "to"
3- scroll --> scroll up or down
3- write --> normal object finding.
4- key press --> just the input of the press word , normal object finder
5- save,cut,copy...., first look for a button with these text on it, if not found search for icons, else seek their shortcuts.

to be fixed:
1- the outside range.




drag:
    drag it up by 5 cm
    drag it up 5 cm
    drag it to the left of bla bla
    drag it to the left
    drag it to the left by 5cm
    drag it to the left 5 cm

scroll:
    scroll up the bar
    scroll the bar up
    scroll up by 5 cm
    scroll 5 cm down
    scroll to the left by 5cm

drag or scroll:
search in their rights for : direction, quantity and to
remove the quantity with its parent.
if a direction is found in the right yeb2a 5alas
if not we perform an object finder
if an object is found yeb2a drag to the position of this object
if the direction is not None probably there's no object and take that as our direction
to know which scroll bar it is you have to check first for the direction of scrolling
if no direction is found then it's a vertical bar by default




order of preprocessing:
1- replace text, left and next to.
2- split conjunctions.
replace ordinal number by ordinal word
3- return it to string text.
4- split conditions (if , then , until, (before, after)---> followed by a verb).
5- resolve pronouns.
6- resolve det (that, which).
7- crop useless parts of the sentence and make the target verb in the root position.


to do:
1- give flexibility in elements and their spelling. (spelling is done).
2- add the colors with their hex values.
3- a function to process the built in objects.
4- some pre_processing



type = drag & action = drag
if no target object look for direction
look for quantity
if found then drag it with this quantity in that direction
if not found then drag it 10 pixels in that direction
if no direction is found then return that the destination is undefined


type = drag & action = scroll call relative drag
kda kda fih source object lazem
look for direction
filter the bars according to the direction
if no direction found then scroll down by default or right by default(depending on the direction of the found bar)
if no quantity is found then scroll by 10 pixels default

type = scroll
look for direction if not found --> down by default
look for quantity if not 10 by default

